<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Cristina on El Baúl del programador</title>
        <link>https://elbauldelprogramador.com/author/cristina/index.xml</link>
        <description>Recent content in Cristina on El Baúl del programador</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>es-ES</language>
        <image>
            <url>https://elbauldelprogramador.com/img/bio-photo-rss.png</url>
            <link>https://elbauldelprogramador.com/author/cristina/index.xml</link>
            <title>Cristina on El Baúl del programador</title>
            <width>144</width>
            <height>144</height>
        </image>
        <atom:link href="https://elbauldelprogramador.com/author/cristina/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Compilar la parte no gratuita de OpenCV 3.0&#43; desde fuente</title>
            <link>https://elbauldelprogramador.com/compilar-la-parte-no-gratuita-de-opencv-3.0-desde-fuente/</link>
            <pubDate>Tue, 07 Mar 2017 20:31:38 +0100</pubDate>
            
            <guid>https://elbauldelprogramador.com/compilar-la-parte-no-gratuita-de-opencv-3.0-desde-fuente/</guid>
            <description>&lt;p&gt;En mi último post &lt;a href=&#34;https://elbauldelprogramador.com/compile-opencv-3.2-with-java-intellij-idea/&#34; title=&#34;Compilar OpenCV 3.2 para Java y usarlo en IntelliJ IDEA&#34;&gt;Compilar OpenCV 3.2 para Java y usarlo en IntelliJ IDEA&lt;/a&gt; Expliqué cómo compilar OpenCV desde el código fuente con soporte para JAVA, sin embargo, La parte no gratuita de OpenCV no se incluye por defecto. Si quieres usar parte de la parte privativa de OpenCV, como los descriptores SIFT o SURF, deberás hacer lo siguiente:&lt;/p&gt;

&lt;h1 id=&#34;1-descarga-opencv-3-2-descomprime-y-crea-un-directorio-donde-construirlo&#34;&gt;[1]. Descarga OpenCV 3.2, descomprime y crea un directorio donde construirlo&lt;/h1&gt;

&lt;p&gt;Siguiendo los pasos de &lt;a href=&#34;https://elbauldelprogramador.com/compile-opencv-3.2-with-java-intellij-idea/&#34; title=&#34;Compilar OpenCV 3.2 para Java y usarlo en IntelliJ IDEA&#34;&gt;mi último post&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;h1 id=&#34;2-descarga-y-descomprime-la-parte-no-gratuita&#34;&gt;[2]. Descarga y descomprime la parte no gratuita&lt;/h1&gt;

&lt;p&gt;La parte no gratuita la separaron de la gratuita en OpenCV3+, por lo que necesitas descargarla aparte desde &lt;a href=&#34;https://github.com/opencv/opencv_contrib&#34; title=&#34;github opencv repository&#34;&gt;el repo github de opencv&lt;/a&gt;  o clonar el repositorio. Después extrae &lt;strong&gt;opencv_contrib&lt;/strong&gt; y ponla dentro de tu carpeta opencv :&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;cris@cris ~ $ cp Downloads/opencv-contrib opencv-3.2.0/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;3-genera-los-makefiles&#34;&gt;[3]. Genera los makefiles&lt;/h1&gt;

&lt;p&gt;Nos movemos a la carpeta de construcción que creamos antes dentro de la carpeta de opencv (en mi caso se llama build), y escribimos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;cris@cris~$ cmake -DBUILD_SHARED_LIBS&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;OFF -DCMAKE_BUILD_TYPE&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;Release -DCMAKE_INSTALL_PREFIX&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;../dist -DOPENCV_EXTRA_MODULES_PATH&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;../opencv_contrib/modules ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Con &lt;code&gt;DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules&lt;/code&gt; estamos especificando donde encontrar la parte no gratuita.&lt;/p&gt;

&lt;p&gt;Si la generación de los makefiles ha sido correcta, entonces ya puedes compilar. Si estás compilando openCV para JAVA, debes comprobar que la variable &lt;code&gt;$JAVA_HOME&lt;/code&gt; tiene el path de tu JDK y que esta está visible por procesos hijo. Para ello, cuando hagas: &lt;code&gt;echo $JAVA_HOME&lt;/code&gt; te deberá mostrar el path de tu JDK. Si no, en una terminal, establece el valor de la variable a el path de tu JDK y expórtala, por ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;cris@cris ~$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/home/jdk1.8.0_111/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Fíjate cuando estés generando el makefile, que la salida para el campo de Java es así:&lt;/p&gt;

&lt;figure&gt;
&lt;img on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/output-build-makefiles-opencv-java.png&#34; title=&#34;Building makefiles for JAVA openCV&#34; alt=&#34;Building makefiles for JAVA openCV output&#34; width=&#34;983&#34; height=&#34;164&#34;&gt;&lt;/img&gt;
&lt;figcaption&gt;building makefiles&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Es decir, que hay un path para JNI especificado,y Java &lt;em&gt;wrappers&lt;/em&gt; está a YES.&lt;/p&gt;

&lt;h1 id=&#34;4-construye&#34;&gt;[4]. Construye&lt;/h1&gt;

&lt;p&gt;ejecuta &lt;em&gt;make&lt;/em&gt; para compilar openCV con Java y crear un jar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;cris@cris ~/opencv-3.2.0/build $ make -j8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;-j8 es por JDK8. Deberás poner aquí tu versión de JAVA.&lt;/p&gt;

&lt;p&gt;Asegúrate de que los ficheros &lt;strong&gt;opencv-320.jar&lt;/strong&gt; y &lt;strong&gt;libopencv_java320.so&lt;/strong&gt; (.so o .dll) han sido creados dentro de &lt;strong&gt;/build&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;cris@cris ~/opencv-3.2.0/build $ ls -R &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep opencv-320.jar
opencv-320.jar
opencv-320.jar.dephelper

cris@cris ~/opencv-3.2.0/build $ ls -R &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep libopencv_java320.so
libopencv_java320.so
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;5-edita-el-archivo-features2d-manual-hpp&#34;&gt;[5]. Edita el archivo features2d_manual.hpp&lt;/h1&gt;

&lt;p&gt;Ok, si la construcción ha ido bien, vete a &lt;code&gt;/modules/features2d/misc/java/src/cpp&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;cris@cris ~/opencv-3.2.02 $ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; modules/features2d/misc/java/src/cpp/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;y edita features2d_manual.hpp con tu editor de texto favorito, como sigue:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;En la línea 8, tras &lt;code&gt;#include &amp;quot;features2d_converters.hpp&amp;quot;&lt;/code&gt;
añade &lt;code&gt;#include &amp;quot;opencv2/xfeatures2d.hpp&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;En la línea 121, en el método &lt;strong&gt;create&lt;/strong&gt;,  dentro de &lt;code&gt;case SITF&lt;/code&gt; y &lt;code&gt;case SURF&lt;/code&gt; reemplaza :&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;//name = name + &amp;quot;SIFT&amp;quot;;&lt;/code&gt; por &lt;code&gt;fd=xfeatures2d::SIFT::create();&lt;/code&gt;
y &lt;code&gt;//name = name + &amp;quot;SURF&amp;quot;;&lt;/code&gt; por &lt;code&gt;fd=xfeatures2d::SURF::create();&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;haz lo mismo en la línea 242 para los extractores SIFT y SURF:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SIFT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;de&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xfeatures2d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SIFT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SURF&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;de&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;xfeatures2d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SURF&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;5-reconstruye-para-aplicar-los-cambios&#34;&gt;[5].Reconstruye para aplicar los cambios&lt;/h1&gt;

&lt;p&gt;Vete a tu carpeta &lt;strong&gt;opencv/build&lt;/strong&gt; y ejecuta &lt;code&gt;make install&lt;/code&gt;.
Cuando finalice, sólo necesitarás incluir los ficheros &lt;strong&gt;.so&lt;/strong&gt; y &lt;strong&gt;.jar&lt;/strong&gt; en tu proyecto de openCV y podrás usar los descriptores SIFT y SURF en tu código.&lt;/p&gt;

&lt;h1 id=&#34;referencias&#34;&gt;Referencias:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/a/35266046/5032130&#34; target=&#34;_blank&#34;&gt;SURF and SIFT algorithms doesn&amp;rsquo;t work in OpenCV 3.0 Java | Stackoverflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
        <item>
            <title>Compilar OpenCV 3.2 para Java y usarlo en IntelliJ IDEA</title>
            <link>https://elbauldelprogramador.com/compile-opencv-3.2-with-java-intellij-idea/</link>
            <pubDate>Wed, 25 Jan 2017 00:00:00 +0000</pubDate>
            
            <guid>https://elbauldelprogramador.com/compile-opencv-3.2-with-java-intellij-idea/</guid>
            <description>&lt;p&gt;Si quieres compilar OpenCV 3.2 por ti mismo con soporte para Java, esto te ayudará. También te ayudará si, compilado OpenCV, quisieras saber como usarlo en IntelliJ IDEA. ¡Empecemos!&lt;/p&gt;

&lt;p&gt;Para compilar OpenCV 3.2 con soporte para Java debes comprobar que tienes instalado en tu sistema lo siguiente:&lt;/p&gt;

&lt;h1 id=&#34;prerequisitos&#34;&gt;Prerequisitos&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Java JDK 7+: necesitamos un JDK para construir el Java &lt;em&gt;binding&lt;/em&gt;, así que si no lo tienes instalado puedes hacerlo desde &lt;a href=&#34;http://www.oracle.com/technetwork/java/javase/downloads/index.html&#34; title=&#34;www.oracle.com&#34;&gt;oracle web page&lt;/a&gt;. Puedes comprobar tu versión de JDK ejecutando: &lt;code&gt;java -version&lt;/code&gt;  en un terminal.&lt;/li&gt;
&lt;li&gt;Apache Ant: teclea &lt;code&gt;ant -version&lt;/code&gt; para comprobar que tienes Apache Ant instalado. Si no lo tienes, instálalo tecleando &lt;code&gt;sudo apt-get install ant&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Python 2.6+: teclea &lt;code&gt;python --version&lt;/code&gt; en la terminal para comprobar si tienes python instalado y en que versión.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;h1 id=&#34;1-descarga-opencv-3-2&#34;&gt;1. Descarga OpenCV 3.2&lt;/h1&gt;

&lt;p&gt;Ve a &lt;a href=&#34;http://opencv.org/&#34; title=&#34;opencv.org&#34;&gt;opencv documentation&lt;/a&gt; y descarga la última versión estable para Linux/Mac.&lt;/p&gt;

&lt;h1 id=&#34;2-descomprime-donde-quieras-instalar-y-crea-un-directorio-en-el-que-construir&#34;&gt;2. Descomprime donde quieras instalar y crea un directorio en el que construir&lt;/h1&gt;

&lt;p&gt;Extrae el contenido de la carpeta &lt;strong&gt;opencv-3.2.0&lt;/strong&gt; donde quieras posicionarlo. Después, navega dentro de ese directorio y crea una carpeta vacía &lt;strong&gt;build&lt;/strong&gt;, donde se guardarán los resultados de la compilación:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    cris@cris ~ $ &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; opencv-3.2.0/
    cris@cris ~ $ mkdir build
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;3-exporta-la-variable-java-home-y-genera-el-makefile&#34;&gt;3. Exporta la variable JAVA_HOME y genera el makefile&lt;/h1&gt;

&lt;p&gt;Debes comprobar que la variable $JAVA_HOME contiene el &lt;em&gt;path&lt;/em&gt; a tu JDK y que sea visible a otros procesos. Tecleando: &lt;code&gt;echo $JAVA_HOME&lt;/code&gt; debe mostrarse el &lt;em&gt;path&lt;/em&gt; de tu JDK. Si no, en una terminalmodifica el valor de la variable al &lt;em&gt;path&lt;/em&gt; del JDK y expórtala. Por ejemplo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;cris@cris ~$ &lt;span class=&#34;nb&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;/home/jdk1.8.0_111/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;navega al directirio &lt;strong&gt;build&lt;/strong&gt; y genera el &lt;em&gt;makefile&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;cris@cris ~/opencv-3.2.0/build $ cmake -DBUILD_SHARED_LIBS&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;OFF ..
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Comprueba que cuando estás generando el &lt;em&gt;makefile&lt;/em&gt; la salida en el campo de Java es la siguiente:
&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 983px) 983px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/output-build-makefiles-opencv-java.png&#34; title=&#34;&#34; alt=&#34;&#34; width=&#34;983px&#34; height=&#34;164px&#34;&gt;&lt;/img&gt;
    &lt;figcaption&gt;construcción &lt;em&gt;makefile&lt;/em&gt;&lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Es decir, debe estar especificado Apache Ant, así como el &lt;em&gt;path&lt;/em&gt; JNI, y &lt;em&gt;Java wrappers&lt;/em&gt; debe estar a &lt;em&gt;YES&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;4-construye&#34;&gt;4. Construye&lt;/h1&gt;

&lt;p&gt;Ejecuta el  &lt;em&gt;make&lt;/em&gt; para compilar openCV con soporte para Java y crear el jar:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;cris@cris ~/opencv-3.2.0/build $ make -j8
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Cuando finalice, comprueba que se han creado los archivos &lt;strong&gt;opencv-320.jar&lt;/strong&gt; y &lt;strong&gt;libopencv_java320.so&lt;/strong&gt; (.so o .dll):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    cris@cris ~/opencv-3.2.0/build $ ls -R &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep opencv-320.jar
    opencv-320.jar
    opencv-320.jar.dephelper

    cris@cris ~/opencv-3.2.0/build $ ls -R &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep libopencv_java320.so
    libopencv_java320.so
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ahora que lo tenemos compilado, el siguiente paso será crear un ejemplo en Java para comprobar que funciona. Yo uso el IDE IntelliJ IDEA Ultimate 2016, por lo que en la siguiente sección explicaré como crear un proyecto en Java de OpenCV en INTELLIJ.&lt;/p&gt;

&lt;h1 id=&#34;creando-un-proyecto-java-opencv-en-intellij-16&#34;&gt;Creando un proyecto Java OpenCV en INTELLIJ 16&lt;/h1&gt;

&lt;p&gt;La forma más fácil de crear un proyecto de OpenCV en Java y Scala es usando SBT.
 Así que abrimos IntelliJ y creamos un nuevo proyecto SBT. Una ve creado, seleccionamos &lt;code&gt;File-&amp;gt;Project Structure&lt;/code&gt;  (Comprueba que en Module JDK aparece tu SDK)
 y selecciona la pestaña &lt;strong&gt;Dependencies&lt;/strong&gt;. Aquí, hacemos click en &lt;em&gt;+&lt;/em&gt; y añadimos &lt;strong&gt;opencv-320.jar&lt;/strong&gt; y la librería, que se encuentra en &lt;strong&gt;opencv3.2.0/build/lib&lt;/strong&gt; :&lt;/p&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 1022px) 1022px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/adding-Opencv-jar-to-IntelliJ-project.png&#34; title=&#34;&#34; alt=&#34;&#34; width=&#34;1022px&#34; height=&#34;341px&#34;&gt;&lt;/img&gt;
    &lt;figcaption&gt;añadiendo .jar file&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 734px) 734px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/adding-libpath-to-intelliJ-project.png&#34; title=&#34;&#34; alt=&#34;&#34; width=&#34;734px&#34; height=&#34;291px&#34;&gt;&lt;/img&gt;
&lt;figcaption&gt;añadiendo .so file&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Finalmente, tomamos el ejemplo de detección de caras de &lt;a href=&#34;http://docs.opencv.org/2.4.4-beta/doc/tutorials/introduction/desktop_java/java_dev_intro.html&#34; title=&#34;docs.opencv.org&#34;&gt;opencv documentation&lt;/a&gt; , lo corregimos (dado que es para la versión 2.4.4 de OpenCV) y lo guardamos en un fichero llamado &lt;strong&gt;helloOpenCV.java&lt;/strong&gt; dentro de la carpeta &lt;code&gt;src-&amp;gt;main-&amp;gt;java&lt;/code&gt;.  El código de ejemplo adaptado a la versión 3.2 de OpenCV es:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.core.*&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.core.Mat&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.core.MatOfRect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.core.Point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.core.Rect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.core.Scalar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.imgcodecs.Imgcodecs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;org.opencv.objdetect.CascadeClassifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;org&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;opencv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;imgproc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;Imgproc&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;rectangle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;c1&#34;&gt;//&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// Detects faces in an image, draws boxes around them, and writes the results&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;// to &amp;quot;faceDetection.png&amp;quot;.&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;//&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;DetectFaceDemo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;\nRunning DetectFaceDemo&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Create a face detector from the cascade file in the resources&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// directory.&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;CascadeClassifier&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;faceDetector&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CascadeClassifier&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getResource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;/lbpcascade_frontalface.xml&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Mat&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Imgcodecs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;imread&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getResource&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;/lena.png&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getPath&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;());&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Detect faces in the image.&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// MatOfRect is a special container class for Rect.&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;MatOfRect&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;faceDetections&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MatOfRect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;faceDetector&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;detectMultiScale&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;faceDetections&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Detected %s faces&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;faceDetections&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Draw a bounding box around each face.&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Rect&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;faceDetections&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;rectangle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rect&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Scalar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;255&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Save the visualized detection.&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;faceDetection.png&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Writing %s&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Imgcodecs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;imwrite&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;HelloOpenCV&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;kd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;args&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;out&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hello, OpenCV&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;c1&#34;&gt;// Load the native library.&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;loadLibrary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Core&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;NATIVE_LIBRARY_NAME&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DetectFaceDemo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
     &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Por último ejecutamos el ejemplo &lt;strong&gt;HelloOpenCV&lt;/strong&gt; y comprobamos que funciona, escribiendo la detección de la cara de lenna en la imágen &lt;strong&gt;faceDetection.png&lt;/strong&gt;.&lt;/p&gt;

&lt;figure&gt;
    &lt;img sizes=&#34;(min-width: 531px) 531px, 100vw&#34; on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/example-face-detection-with-opencv.png&#34; title=&#34;&#34; alt=&#34;&#34; width=&#34;531px&#34; height=&#34;528px&#34;&gt;&lt;/img&gt;
    &lt;figcaption&gt;ejemplo detección de caras&lt;/figcaption&gt;
&lt;/figure&gt;</description>
        </item>
        
        <item>
            <title>Cambia La Imágen De Fondo Del Terminal Gnome Y Pon Un Color De Texto a Juego, Automáticamente</title>
            <link>https://elbauldelprogramador.com/imagen-terminal-color-texto-a-juego-linux/</link>
            <pubDate>Mon, 18 Jul 2016 16:08:56 +0000</pubDate>
            
            <guid>https://elbauldelprogramador.com/imagen-terminal-color-texto-a-juego-linux/</guid>
            <description>&lt;p&gt;Seguramente seas una de esas personas que pasan mucho tiempo delante del ordenador con una o varias shells abiertas. De hecho, seguramente tengas más que visto el fondo negro con letras blancas, o el estilo de terminal que pusiste hace tiempo,  porque cambiarlo todos los días no es el hobbie de nadie. Pero ¿y si se cambiara sólo?¿ y si pudieras poner tus imágenes favoritas de fondo del terminal, con un color de texto que no desentone con tu imágen  y tú no tuvieras que hacer nada?&lt;/p&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;p&gt;Aquí os quiero contar como se me ocurrió hacerlo a mí, con un script en bash  y así escapar de la rutina de estilo de las shells.&lt;/p&gt;

&lt;h2 id=&#34;antes-de-comenzar&#34;&gt;Antes de comenzar&amp;hellip;&lt;/h2&gt;

&lt;h4 id=&#34;comprobar-versión-de-gnome-shell&#34;&gt;Comprobar versión de gnome-shell&lt;/h4&gt;

&lt;p&gt;El script es válido para &lt;strong&gt;versiones de gnome &amp;lt; 3.8&lt;/strong&gt;. Lo he probado en Linux Mint Debian Edition y en Ubuntu 14.04. En este último tuve que instalar gnome-shell.&lt;/p&gt;

&lt;p&gt;Para instalar gnome-shell:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    cris@cris ~ $ sudo apt-get install gnome-shell
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Para comprobar la versión de gnome:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    cris@cris ~ $ gnome-shell --version
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;instalar-imagemagick-y-gawk&#34;&gt;instalar ImageMagick y gawk&lt;/h4&gt;

&lt;p&gt;Usaremos funciones de ImageMagick para convertir las imágenes, y gawk para filtrar por expresiones. Para instalarlos:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    cris@cris ~ $ sudo apt-get install gawk
    cris@cris ~ $ sudo apt-get install imagemagick
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;expliación-del-script&#34;&gt;Expliación del script&lt;/h2&gt;

&lt;p&gt;La idea del script es modificar directamente los valores de configuración de terminal que se establecen en el fichero &lt;strong&gt;%gconf.xml&lt;/strong&gt; que se ubica en &lt;code&gt;home/user/.gconf/apps/gnome-terminal/profiles/Default/&lt;/code&gt;, para versiones de shell gnome &amp;lt; 3.8.&lt;/p&gt;

&lt;h4 id=&#34;declaración-de-variables&#34;&gt;Declaración de variables&lt;/h4&gt;

&lt;p&gt;Inicialmente declaramos las variables con la ruta de los comandos que vamos a tilizar frecuentemente. No es obligatorio, pero es recomendable. La variable &lt;strong&gt;ROUTE&lt;/strong&gt; contiene la ruta del directorio donde guardamos las imágenes que queremos poner de fondo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;GCONFT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;/usr/bin/gconftool-2&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;SORT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;/usr/bin/sort&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;GAWK&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;/usr/bin/gawk&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;CNVRT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;/usr/bin/convert&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;ROUTE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;/miRuta/*&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Nota:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;gconftool-2&lt;/strong&gt; : herramienta de configuración gnome. La usaremos con la opción set para modificar el archivo de configuración.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;sort&lt;/strong&gt; : comando que ordena líneas de texto.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gawk&lt;/strong&gt; : escaneador de patrones. Lo usaremo para filtrar patrón hexadecimal.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;convert&lt;/strong&gt; : lo usaremos para redimensionar la imágen y convertirla en hibstograma.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;tomar-imágenes&#34;&gt;Tomar imágenes&lt;/h4&gt;

&lt;p&gt;tomamos aleatoriamente una imágen de &lt;strong&gt;miRuta&lt;/strong&gt; para la terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;FILE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;shuf -n &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -e $ROUTE&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Limpiamos la ruta, quedándonos solo con el nombre de la imágen:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;FILECONV&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;basename &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$F&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;ILE&amp;quot;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Redimensionamos la imágen (sólo si es necesario, por ejemplo, si las imágenes que queremos usar son tamaño fondo de escritorio). Para no modificar la imágen original ni guardar muchas copias innecesarias, la guardamos en /tmp.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    convert &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$F&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;ILE&amp;quot;&lt;/span&gt; -resize %50 &lt;span class=&#34;s2&#34;&gt;&amp;quot;/tmp/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$F&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;ILECONV&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Como mis imágenes son tamaño fondo de escritorio, las redimensiono a la mitad de su tamaño para que se aprecien mejor en el terminal.&lt;/p&gt;

&lt;p&gt;Opcional: tomamos otra imágen aleatoriamente de la carpeta para fondo de escritorio:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;FILED&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;shuf -n &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; -e $ROUTE&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;ponemos-la-imágen-de-fondo-en-el-terminal&#34;&gt;Ponemos la imágen de fondo en el terminal&lt;/h4&gt;

&lt;p&gt;modificamos algunas configuraciones que vienen por defecto antes de aplicar los cambios, para que tengan efecto:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    $GCONFT --set /apps/gnome-terminal/profiles/Default/background_type --type string &lt;span class=&#34;s2&#34;&gt;&amp;quot;image&amp;quot;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;#solido por defecto&lt;/span&gt;

    $GCONFT --set /apps/gnome-terminal/profiles/Default/use_custom_command --type bool &lt;span class=&#34;s2&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;

    $GCONFT --set /apps/gnome-terminal/profiles/Default/use_theme_colors --type bool &lt;span class=&#34;s2&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;

    $GCONFT --set /apps/gnome-terminal/profiles/Default/use_custom_default_size --type bool &lt;span class=&#34;s2&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Ahora, ya podemos tomar la imágen redimensionada y ponerla como imágen de fondo del terminal:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    $GCONFT --set /apps/gnome-terminal/profiles/Default/background_image --type string &lt;span class=&#34;s2&#34;&gt;&amp;quot;/tmp/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$F&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;ILECONV&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Por último, ponemos un color oscuro de fondo del terminal y un nivel de opacidad alto, para que se vea mejor el texto:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    $GCONFT --set /apps/gnome-terminal/profiles/Default/background_color --type string &lt;span class=&#34;s2&#34;&gt;&amp;quot;#181824243131&amp;quot;&lt;/span&gt;

    $GCONFT --set /apps/gnome-terminal/profiles/Default/background_darkness --type float &lt;span class=&#34;s2&#34;&gt;&amp;quot;0.78&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;ponemos-color-del-texto-a-juego&#34;&gt;Ponemos color del texto a juego&lt;/h4&gt;

&lt;p&gt;Para ello, sacamos el hibstograma de colores de la imágen, y tomamos un tono de esos colores. Con &lt;strong&gt;convert&lt;/strong&gt; podemos indicar el número de colores que deseamos sacar y la profundidad. Luego los ordenamos segun su orden numérico y filtramos solo el  código hexadecimal de los colores con &lt;strong&gt;gawk&lt;/strong&gt;. Lo guardamos en un fichero de texto llamado paleta.txt que se creara en /tmp.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&#34;nv&#34;&gt;$C&lt;/span&gt;NVRT &lt;span class=&#34;s2&#34;&gt;&amp;quot;/tmp/&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$F&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;ILECONV&amp;quot;&lt;/span&gt; -colors &lt;span class=&#34;m&#34;&gt;25&lt;/span&gt; -depth &lt;span class=&#34;m&#34;&gt;6&lt;/span&gt; -format &lt;span class=&#34;s1&#34;&gt;&amp;#39;%c&amp;#39;&lt;/span&gt; histogram:info:- &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; $SORT --general-numeric-sort &lt;span class=&#34;se&#34;&gt;\&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; $GAWK &lt;span class=&#34;s1&#34;&gt;&amp;#39;match ($0, /^ *[0-9]+: \([^)]+\) (#[0-9A-F]+) .+$/, a) { print a[1] }&amp;#39;&lt;/span&gt; &amp;gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;/tmp/paleta.txt&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Para finalizar, abrimos el fichero temporal &lt;strong&gt;paleta.txt&lt;/strong&gt; y leemos  6 primeras líneas, es decir, los 6 primeros colores:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class=&#34;c1&#34;&gt;#abrir fichero&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; 3&amp;lt; /tmp/paleta.txt
    &lt;span class=&#34;c1&#34;&gt;#leer 6 lineas&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; color1 &amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;3
    &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; color2 &amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;3
    &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; color3 &amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;3
    &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; color4 &amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;3
    &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; color5 &amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;3
    &lt;span class=&#34;nb&#34;&gt;read&lt;/span&gt; color6 &amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;3
    &lt;span class=&#34;c1&#34;&gt;#cerrar&lt;/span&gt;
    &lt;span class=&#34;nb&#34;&gt;exec&lt;/span&gt; 3&amp;lt;&lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;-
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;y ponemos el último color leído como color de texto:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    $GCONFT --set /apps/gnome-terminal/profiles/Default/foreground_color --type string &lt;span class=&#34;s2&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$c&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;olor6&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Lo de tomar el 6º color es porque como están ordenados de más claro a más oscuro, los colores claros &amp;ldquo; centrales&amp;rdquo; son los que mejor resultados dan. No obstante, puedes modificarlo dependiendo de tus fotos. El script no es infalible, la carpeta que yo uso tiene 700 imagenes y siempre hay  imágenes con las que falla eligiendo el color de texto más adecuado para su lectura, sobre todo en las  imágenes muy oscuras  donde no hay ningún color claro. Si se te ocurre alguna mejora, ¡comentala!&lt;/p&gt;

&lt;p&gt;Opcional: si tambien quieres cambiar la imágen del escritorio:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    gsettings &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; org.gnome.desktop.background picture-uri &lt;span class=&#34;s2&#34;&gt;&amp;quot;file:///&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$F&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;ILED&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;disfruta-y-luce-tus-terminales&#34;&gt;Disfruta y luce tus terminales&lt;/h4&gt;

&lt;h4 id=&#34;planifica-la-ejecución&#34;&gt;Planifica la ejecución&lt;/h4&gt;

&lt;p&gt;Para no tener que andar lanzando el script, puedes planificarlo con &lt;strong&gt;crontab&lt;/strong&gt; para que se ejecute, por ejemplo cada vez que inicias el sistema:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;    cris@cris ~ $ crontab -e &lt;span class=&#34;c1&#34;&gt;#para abrir contab&lt;/span&gt;
    @reboot /miRuta_al_script/CambiaTerminales.sh &lt;span class=&#34;c1&#34;&gt;# añadir tarea&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;algunos-ejemplos&#34;&gt;Algunos ejemplos&lt;/h4&gt;

&lt;figure&gt;
&lt;img on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/imagen-terminal-color-texto-a-juego-linux2.png&#34; alt=&#34;imagen-terminal-color-texto-a-juego-linux2&#34; title=&#34;Ejemplo 1&#34; width=&#34;656px&#34; height=&#34;386px&#34; /&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/imagen-terminal-color-texto-a-juego-linux3.png&#34; alt=&#34;imagen-terminal-color-texto-a-juego-linux2&#34; title=&#34;Ejemplo 1&#34; width=&#34;650px&#34; height=&#34;386px&#34; /&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/imagen-terminal-color-texto-a-juego-linux4.png&#34; alt=&#34;imagen-terminal-color-texto-a-juego-linux2&#34; title=&#34;Ejemplo 1&#34; width=&#34;656px&#34; height=&#34;385px&#34; /&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;img on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/imagen-terminal-color-texto-a-juego-linux5.png&#34; alt=&#34;imagen-terminal-color-texto-a-juego-linux2&#34; title=&#34;Ejemplo 1&#34; width=&#34;1003px&#34; height=&#34;581px&#34; /&gt;
&lt;/figure&gt;

&lt;h4 id=&#34;enlace-al-código&#34;&gt;Enlace al código&lt;/h4&gt;

&lt;p&gt;Puedes bajarte el script en &lt;a href=&#34;https://github.com/CristinaHG/My-TerminalsBacgroundSetter&#34; title=&#34;Repositorio My Terminals Background Setter&#34;&gt;github&lt;/a&gt;&lt;/p&gt;</description>
        </item>
        
        <item>
            <title>Biometría Aplicada a La Seguridad - Reconocimiento De Patrones</title>
            <link>https://elbauldelprogramador.com/biometria-seguridad-patrones/</link>
            <pubDate>Tue, 26 Jan 2016 10:51:21 +0000</pubDate>
            
            <guid>https://elbauldelprogramador.com/biometria-seguridad-patrones/</guid>
            <description>&lt;figure&gt;
&lt;a href=&#34;https://elbauldelprogramador.com/img/hotlink-ok/Sistemas-biometricos-aplicados-a-la-seguridad.png&#34;&gt;&lt;img on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/hotlink-ok/Sistemas-biometricos-aplicados-a-la-seguridad.png&#34; title=&#34;{{ page.title }}&#34; alt=&#34;{{ page.title }}&#34; width=&#34;640px&#34; height=&#34;405px&#34; /&gt;&lt;/a&gt;
&lt;span class=&#34;image-credit&#34;&gt;Crédito de la imagen: pixabay&lt;a href=&#34;https://pixabay.com/en/biometrics-eye-security-154660/&#34;&gt;&lt;/a&gt;&lt;/span&gt;&lt;br /&gt;
&lt;/figure&gt;

&lt;p&gt;El siguiente artículo forma parte de un trabajo en grupo realizado para la asignatura &lt;em&gt;Seguridad en Sistemas Operativos&lt;/em&gt; de la facultad de Ingeniería Informática de Granada (ETSIIT). Los componentes del grupo fueron &lt;a href=&#34;http://twitter.com/MPV_Prod&#34;&gt;@MPV_Prod&lt;/a&gt; , &lt;a href=&#34;http://twitter.com/_musicalnote&#34;&gt;@_musicalnote&lt;/a&gt; y &lt;a href=&#34;http://twitter.com/elbaulp&#34;&gt;@ElBaulP&lt;/a&gt;. Este artículo es autoría de @_musicalnote.&lt;/p&gt;

&lt;h1 id=&#34;índice&#34;&gt;Índice&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://elbauldelprogramador.com/biometria-seguridad-introduccion&#34; title=&#34;Biometría aplicada a la seguiridad - Introducción&#34;&gt;Biometría aplicada a la seguiridad - Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Biometría aplicada a la seguiridad - Reconocimiento de patrones&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elbauldelprogramador.com/sistemas-biometricos&#34; title=&#34;Biometría aplicada a la seguiridad - Sistemas biométricos&#34;&gt;Biometría aplicada a la seguiridad - Sistemas biométricos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;!--ad--&gt;&lt;/p&gt;

&lt;h2 id=&#34;reconocimiento-de-patrones&#34;&gt;Reconocimiento de patrones&lt;/h2&gt;

&lt;p&gt;Se ha hablado de las distintas técnicas que existen para realizar la
identificación de un individuo, ahora se profundizará en el &lt;strong&gt;como&lt;/strong&gt; se
consigue reconocer una cara, un iris, una firma etc, mediante el
reconocimiento de patrones.&lt;/p&gt;

&lt;h3 id=&#34;qué-es-el-reconocimiento-de-patrones&#34;&gt;Qué es el reconocimiento de patrones&lt;/h3&gt;

&lt;p&gt;Es la ciencia encargada de la descripción y clasificación de objetos,
personas, señales, representaciones etc. El reconocimiento de patrones
tiene varios campos de aplicación, sin embargo el más relacionado con la
&lt;a href=&#34;https://elbauldelprogramador.com/security-now/&#34; title=&#34;Artículos de seguridad&#34;&gt;seguridad&lt;/a&gt; es sin duda el reconocimiento biométrico de personas. En este
campo se trata de asignar una identidad a una persona, o verificar que
es quién dice ser, midiendo ciertas características propias.
Características como la voz, cara, manos, huellas dactilares, iris,
firma etc.&lt;/p&gt;

&lt;h3 id=&#34;el-problema-del-reconocimiento-de-patrones&#34;&gt;El problema del reconocimiento de patrones&lt;/h3&gt;

&lt;p&gt;A los humanos se nos da terriblemente bien reconocer algunos patrones,
nuestro cerebro tiene unos algoritmos que aún desconocemos muchísimo más
rápidos que cualquier computador para reconocer una cara,o la voz, por
ejemplo.&lt;/p&gt;

&lt;h3 id=&#34;aproximaciones-al-reconocimiento-de-patrones&#34;&gt;Aproximaciones al reconocimiento de patrones&lt;/h3&gt;

&lt;p&gt;Hay varios tipos de aproximaciones, aunque se suelen combinar entre sí
para dar lugar a sistemas híbridos. Todas ellas tienen en común dos
fases:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Fase de train o aprendizaje&lt;/li&gt;
&lt;li&gt;Fase de clasificación o test.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En primer lugar, para realizar un sistema de reconocimiento de patrones
que nos permita identificar a un individuo por alguna característica
propia debemos disponer de un buen volumen de datos de dicha
característica, haciendo así más grande la probabilidad de crear un
modelo más certero. Ahora bien, fuente fácil de problemas es no tener en
cuenta si dichos datos están o no exentos de variabilidad (ruido
introducido por el sensor, cambios de escala, deformaciones,
rotaciones…) por lo que antes de entrenar el sistema y testearlo, es
importarte limpiar esos datos o tomar alguna decisión con respecto a los
datos afectados (no utilizarlos para entrenar el clasificador, por
ejemplo). Finalmente tras haber entrenado al sistema,se procede a
testearlo, pasándole otro conjunto de datos que representen las
características a analizar,evaluando así la capacidad del reconocedor de
acertar en sus decisiones.&lt;/p&gt;

&lt;h3 id=&#34;extacción-de-características&#34;&gt;Extacción de características&lt;/h3&gt;

&lt;p&gt;En un reconocedor, es muy importante tener en cuenta la extracción de
características (parametrización) a realizar sobre la entrada, esto es,
decidir qué vectores de características usar. Por ejemplo, en imágenes
se puede usar el mapa de bits). Es indudable que el hecho de
parametrizar nos facilita en cierta medida el problema, ya que mediante
ella conseguimos disminuir el número de datos a procesar y transformamos
el espacio de características, siendo más fácil discriminar en él(ver
qué muestras sirven y cuales no).&lt;/p&gt;

&lt;p&gt;Problema: determinar los vectores de características más adecuados no es
una tarea trivial.&lt;/p&gt;

&lt;h3 id=&#34;separabilidad-entre-clases&#34;&gt;Separabilidad entre clases&lt;/h3&gt;

&lt;p&gt;Si queremos minimizar el error en nuestro sistema biométrico, debemos
procurar que la clasificación de los datos sea lo más certera posible, y
para eso debemos seleccionar el clasificador que nos resulte más
adecuado a nuestros datos(clasificadores distintos, resultados
distintos), eligiendo bien el criterio mediante el cual clasificar.&lt;/p&gt;

&lt;p&gt;En la Figura se puede apreciar como las dos clases son
perfectamente separables cuando se usan las dos componentes del vector
(2 dimensiones), pero si reducimos a una dimensión se solapan ambas
clases,resultando imposible separarlas.&lt;/p&gt;

&lt;figure&gt;
&lt;a href=&#34;https://elbauldelprogramador.com/img/separability.png&#34;&gt;&lt;img on=&#34;tap:lightbox1&#34; role=&#34;button&#34; tabindex=&#34;0&#34; layout=&#34;responsive&#34; src=&#34;https://elbauldelprogramador.com/img/separability.png&#34; title=&#34;Separabilidad de dos clases con vectores
  bidimensionales&#34; alt=&#34;Separabilidad de dos clases con vectores
  bidimensionales&#34; width=&#34;320px&#34; height=&#34;316px&#34; /&gt;&lt;/a&gt;
&lt;/figure&gt;

&lt;p&gt;Es fácil mostrarlo en una imágen cuando tenemos pocas clases, como es
este caso, que tenemos sólo dos. Pero cuando tenemos muchas el problema
se complica. ¿Cómo sabemos si nuestro clasificador lo está haciendo bien
o no? ¿cómo sabemos si una característica es discriminativa? En este
caso se procede a calcular la media discriminativa de la característica,
a partir de la distancia media entre clases y normalizando por la
varianza.&lt;/p&gt;

&lt;h3 id=&#34;introducción-a-la-detección-de-intrusos-usando&#34;&gt;Introducción a la detección de intrusos usando&lt;/h3&gt;

&lt;p&gt;Aplicando técnicas biométricas en sistemas de detención de &lt;a href=&#34;https://elbauldelprogramador.com/6-formas-usadas-por-los-cibercriminales-para-robar-o-vulnerar-credenciales-de-login/&#34; title=&#34;6 formas usadas por los cibercriminales para robar o vulnerar credenciales de login&#34;&gt;intrusos&lt;/a&gt; nos
permite reforzar la seguridad del sistema, por ejemplo, durante la
autentificación, ya que podríamos establecer un perfil de cada usuario
con más detalle, sin tener que preocuparnos de ciertos problemas como
por ejemplo de que estos dejen su contraseña a la vista,la compartan se
la roben…evitando así una posibilidad de ataque que afecte al
rendimiento de un IDS.&lt;/p&gt;

&lt;p&gt;Como es evidente, el empleo de biometría no hará imposible que se
produzcan ataques en el sistema, pero al menos permitirá identificar a
cada usuario previamente, mediante los mecanismos de
autentificación/validación, por lo que cualquier mal uso/ataque
provocado por un usuario y detectado por un IDS apuntarán a un usuario
determinado.&lt;/p&gt;

&lt;p&gt;Esto está todavía mejorándose, pero ya se habla de que en un futuro se
podrían desarrollar técnicas avanzadas de biometría, como por ejemplo,
reconocimiento mediante ADN.&lt;/p&gt;

&lt;h1 id=&#34;índice-1&#34;&gt;Índice&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://elbauldelprogramador.com/biometria-seguridad-introduccion&#34; title=&#34;Biometría aplicada a la seguiridad - Introducción&#34;&gt;Biometría aplicada a la seguiridad - Introducción&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Biometría aplicada a la seguiridad - Reconocimiento de patrones&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://elbauldelprogramador.com/sistemas-biometricos&#34; title=&#34;Biometría aplicada a la seguiridad - Sistemas biométricos&#34;&gt;Biometría aplicada a la seguiridad - Sistemas biométricos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;referencias&#34;&gt;Referencias&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.es/gp/product/8478976361/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp;=3626&amp;amp;creative;=24822&amp;amp;creativeASIN;=8478976361&amp;amp;linkCode;=as2&amp;amp;tag;=bmacoc-21&#34; title=&#34;M. Tapiador Mateos and J. A. Sigüenza Pizarro, Tecnologías biométricas aplicadas a la
seguridad&#34;&gt;M. Tapiador Mateos and J. A. Sigüenza Pizarro, Tecnologías biométricas aplicadas a la
seguridad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.es/gp/product/9814656526/ref=as_li_ss_tl?ie=UTF8&amp;amp;camp;=3626&amp;amp;creative;=24822&amp;amp;creativeASIN;=9814656526&amp;amp;linkCode;=as2&amp;amp;tag;=bmab-21&#34; title=&#34;C. H. Chen and C. H. Chen, Handbook of Pattern Recognition and Computer Vision 4th edition&#34;&gt;C. H. Chen and C. H. Chen, Handbook of Pattern Recognition and Computer Vision 4th edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://es.wikipedia.org/wiki/
Biometr%C3%ADa&#34; title=&#34;Wikipedia, “Biometría, según wikipedia.”&#34;&gt;Wikipedia, “Biometría, según wikipedia.”&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.biometria.gov.ar/
acerca-de-la-biometria/historia-de-la-biometria.aspx&#34; title=&#34;G. Argentina, “Historia de la biometría.”&#34;&gt;G. Argentina, “Historia de la biometría.”&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
        </item>
        
    </channel>
</rss>
